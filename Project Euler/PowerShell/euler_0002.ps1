<#
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#>
##########################################################################
# First attempt, brute force
# Pre-populate the array with the first two numbers (1,2)
# Then generate every fib number up to the max and store it in the array
# Then add up all even numbers in the array
##########################################################################
# Pre-populate array with first two fib numbers
$list = 1,2;
# Keep track of where we are in the array
$i = 0;
# Max size of fib number to stop at
$max = 4000000;
# Value of previous two values combined
$result = 0;

while ($true) {
    # find sum of previous two values
    $result = $list[$i] + $list[$i+1];

    # if it's above the max, then stop
    if ($result -ge $max) { break; }

    # add to the array
    $list += $result;

    $i++;
}

# Add up all even numbers in the array
$list | ? { $_ % 2 -eq 0 } | measure -Sum
##########################################################################

# Note, answer doc says every 3rd fib number is always even, so maybe something could be done with that.
# But it doesn't seem like it would be any more efficient than just brute forcing.